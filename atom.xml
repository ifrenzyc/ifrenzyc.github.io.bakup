<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ITSYC&#39;s Blog</title>
  <subtitle>Thoughts on life and code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-16T09:40:49.944Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yang Chuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL Streaming 的使用和约束</title>
    <link href="http://yoursite.com/2017/11/16/mysql-streaming/"/>
    <id>http://yoursite.com/2017/11/16/mysql-streaming/</id>
    <published>2017-11-16T09:39:34.000Z</published>
    <updated>2017-11-16T09:40:49.944Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Client Side Cursor</li>
<li>Server Side Cursor</li>
</ul>
<p>在 MySQL 中查询超大结果集时，由于 MySQL JDBC 的 ResultSet 默认是接收完全部数据后再交由应用程序进行处理的。对于数据量很大的查询（如报表统计）、有限的 JVM 内存等程序，很容易就照成应用程序 OOM 异常（ =java.lang.OutOfMemoryError: Java heap space= ）。对于这个错误解决起来也很简单。</p>
<p>MySQL JDBC 支持客户端的流方式（Streaming）读取数据，即应用程序一边从数据库拉取数据，每获取到一条数据后就可以立即丢给业务逻辑程序处理。代码实现也很简单：</p>
<p>只要在初始化 Statement 的时候，设置这几个参数即可： =ResultSet.TYPE_FORWARD_ONLY= 、 =ResultSet.CONCUR_READ_ONLY= 、 =Integer.MIN_VALUE= 。</p>
<h1 id="BEGIN-SRC-java"><a href="#BEGIN-SRC-java" class="headerlink" title="+BEGIN_SRC java"></a>+BEGIN_SRC java</h1><p>  preparedStatement = connection.prepareStatement(formatSql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);<br>  preparedStatement.setFetchSize(Integer.MIN_VALUE);</p>
<h1 id="END-SRC"><a href="#END-SRC" class="headerlink" title="+END_SRC"></a>+END_SRC</h1><p>=setFetchSize=Integer.MIN_VALUE= 这是一个 magic number，而不是指定每次读取多少数据。不能改成其他值。具体参考[[<a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-implementation-notes.html#ResultSet][官方文档]]。" target="_blank" rel="external">https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-implementation-notes.html#ResultSet][官方文档]]。</a></p>
<p>下面是一个简单的使用例子</p>
<h1 id="BEGIN-SRC-java-1"><a href="#BEGIN-SRC-java-1" class="headerlink" title="+BEGIN_SRC java"></a>+BEGIN_SRC java</h1><p>  import java.sql.Connection;<br>  import java.sql.DriverManager;<br>  import java.sql.ResultSet;<br>  import java.sql.Statement;</p>
<p>  public class Streaming {<br>      public static void main(String[] args) throws Exception {<br>          Class.forName(“com.mysql.jdbc.Driver”);</p>
<pre><code>      String url = &quot;jdbc:mysql://127.0.0.1:3306/test&quot;;
      String username = &quot;root&quot;;
      String password = &quot;Aa123456&quot;;
      Connection conn = DriverManager.getConnection(url, username, password);

      Statement statement =
              conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
      statement.setFetchSize(Integer.MIN_VALUE);
      // MySQL connector 的 StatementImpl 的 createStreamingResultSet 方法中明确指出：
      // We only stream result sets when they are forward-only, read-only, and the fetch size has been set to Integer.MIN_VALUE
      // 也就是说必须设置这三个属性才能做到流式读取

      int batchSize = 2000;

      ResultSet rs = statement.executeQuery(&quot;select * from steaming_test&quot;);//一般的数据读取
      while (true) {
          for (int rowIndex = 0; rowIndex &lt; batchSize; rowIndex++) {
              if(!rs.next()){
                  return;
              }
              System.out.println(&quot;one line&quot;);
          }
          System.out.println(&quot;one batch&quot;);
      }
  }
</code></pre><p>  }</p>
<h1 id="END-SRC-1"><a href="#END-SRC-1" class="headerlink" title="+END_SRC"></a>+END_SRC</h1><ul>
<li><p>为什么 MySQL 没有默认就采用 Streaming 方式？<br>关于 Streaming 的代价，参考：</p>
</li>
<li><p>采用 Streaming 方式在 MySQL 协议和数据报文上有没什么影响？<br>并没有，Streaming 方式有客户端模式（Client Side Cursor）和服务端模式（Server Side Cursor），上面程序例子采用的是客户端模式，MySQL 数据库的数据报文没任何差异。</p>
</li>
<li><p>Streaming 的主要问题</p>
</li>
</ul>
<ul>
<li><p>长时间占用数据库链接</p>
<ul>
<li>单个链接占用时间长</li>
<li>同个事务内链接无法复用</li>
</ul>
</li>
<li><p>数据库当前锁</p>
<ul>
<li>不同链接无法获取到事务锁</li>
</ul>
</li>
</ul>
<ul>
<li>应用场景<br><em>* Streaming 的应用场景<br>采用 Streaming 方式读取数据，看似一件很美好的事情，但是对于数据库本身却是代价非常大的。如果业务程序处理不当，会导致长时间占用数据库链接。目前只有下面一种场景建议采用 Streaming 方式读取数据： </em>需要大批量获取数据库记录用于产生其他存储的数据的业务场景* 。</li>
</ul>
<p>具体的使用例子有：</p>
<ul>
<li>用户查询大批量数据后用于导出；</li>
<li>获取整表数据用于全量更新缓存/消息中间件数据等；</li>
</ul>
<p>** 什么场景下不适合使用<br>有一些场景看似可以用流处理当不应该用的，比如：数据批处理。</p>
<p>如：查询一批数据进行业务处理，然后将数据改成下一个流转状态的。</p>
<ul>
<li>参考材料</li>
</ul>
<ul>
<li>[[<a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-implementation-notes.html#ResultSet][JDBC" target="_blank" rel="external">https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-implementation-notes.html#ResultSet][JDBC</a> API Implementation Notes]]</li>
<li>[[<a href="http://hedengcheng.com/?p=771][MySQL" target="_blank" rel="external">http://hedengcheng.com/?p=771][MySQL</a> 加锁处理分析]]</li>
<li>[[<a href="http://codepub.cn/2017/05/12/MySQL-pull-the-massive-data-out-of-memory-error/][MySQL" target="_blank" rel="external">http://codepub.cn/2017/05/12/MySQL-pull-the-massive-data-out-of-memory-error/][MySQL</a> 拉取海量数据报 OutOfMemoryError]]</li>
<li>[[<a href="https://www.wix.engineering/single-post/2017/09/18/The-Cost-of-Streaming-Data-from-MySQL][The" target="_blank" rel="external">https://www.wix.engineering/single-post/2017/09/18/The-Cost-of-Streaming-Data-from-MySQL][The</a> Cost of Streaming Data from MySQL]]</li>
<li>[[<a href="https://vladmihalcea.com/2016/11/23/how-does-mysql-result-set-streaming-perform-vs-fetching-the-whole-jdbc-resultset-at-once/][How" target="_blank" rel="external">https://vladmihalcea.com/2016/11/23/how-does-mysql-result-set-streaming-perform-vs-fetching-the-whole-jdbc-resultset-at-once/][How</a> does MySQL result set streaming perform vs fetching the whole JDBC ResultSet at once]]</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Client Side Cursor&lt;/li&gt;
&lt;li&gt;Server Side Cursor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 MySQL 中查询超大结果集时，由于 MySQL JDBC 的 ResultSet 默认是接收完全部数据后再交由应用程序进行处理的。对于
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="mysql, java" scheme="http://yoursite.com/tags/mysql-java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Streaming 的使用和约束</title>
    <link href="http://yoursite.com/2017/11/16/mysql/"/>
    <id>http://yoursite.com/2017/11/16/mysql/</id>
    <published>2017-11-16T09:39:34.000Z</published>
    <updated>2017-11-16T09:41:21.972Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Client Side Cursor</li>
<li>Server Side Cursor</li>
</ul>
<p>在 MySQL 中查询超大结果集时，由于 MySQL JDBC 的 ResultSet 默认是接收完全部数据后再交由应用程序进行处理的。对于数据量很大的查询（如报表统计）、有限的 JVM 内存等程序，很容易就照成应用程序 OOM 异常（ =java.lang.OutOfMemoryError: Java heap space= ）。对于这个错误解决起来也很简单。</p>
<p>MySQL JDBC 支持客户端的流方式（Streaming）读取数据，即应用程序一边从数据库拉取数据，每获取到一条数据后就可以立即丢给业务逻辑程序处理。代码实现也很简单：</p>
<p>只要在初始化 Statement 的时候，设置这几个参数即可： =ResultSet.TYPE_FORWARD_ONLY= 、 =ResultSet.CONCUR_READ_ONLY= 、 =Integer.MIN_VALUE= 。</p>
<h1 id="BEGIN-SRC-java"><a href="#BEGIN-SRC-java" class="headerlink" title="+BEGIN_SRC java"></a>+BEGIN_SRC java</h1><p>  preparedStatement = connection.prepareStatement(formatSql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);<br>  preparedStatement.setFetchSize(Integer.MIN_VALUE);</p>
<h1 id="END-SRC"><a href="#END-SRC" class="headerlink" title="+END_SRC"></a>+END_SRC</h1><p>=setFetchSize=Integer.MIN_VALUE= 这是一个 magic number，而不是指定每次读取多少数据。不能改成其他值。具体参考[[<a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-implementation-notes.html#ResultSet][官方文档]]。" target="_blank" rel="external">https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-implementation-notes.html#ResultSet][官方文档]]。</a></p>
<p>下面是一个简单的使用例子</p>
<h1 id="BEGIN-SRC-java-1"><a href="#BEGIN-SRC-java-1" class="headerlink" title="+BEGIN_SRC java"></a>+BEGIN_SRC java</h1><p>  import java.sql.Connection;<br>  import java.sql.DriverManager;<br>  import java.sql.ResultSet;<br>  import java.sql.Statement;</p>
<p>  public class Streaming {<br>      public static void main(String[] args) throws Exception {<br>          Class.forName(“com.mysql.jdbc.Driver”);</p>
<pre><code>      String url = &quot;jdbc:mysql://127.0.0.1:3306/test&quot;;
      String username = &quot;root&quot;;
      String password = &quot;Aa123456&quot;;
      Connection conn = DriverManager.getConnection(url, username, password);

      Statement statement =
              conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
      statement.setFetchSize(Integer.MIN_VALUE);
      // MySQL connector 的 StatementImpl 的 createStreamingResultSet 方法中明确指出：
      // We only stream result sets when they are forward-only, read-only, and the fetch size has been set to Integer.MIN_VALUE
      // 也就是说必须设置这三个属性才能做到流式读取

      int batchSize = 2000;

      ResultSet rs = statement.executeQuery(&quot;select * from steaming_test&quot;);//一般的数据读取
      while (true) {
          for (int rowIndex = 0; rowIndex &lt; batchSize; rowIndex++) {
              if(!rs.next()){
                  return;
              }
              System.out.println(&quot;one line&quot;);
          }
          System.out.println(&quot;one batch&quot;);
      }
  }
</code></pre><p>  }</p>
<h1 id="END-SRC-1"><a href="#END-SRC-1" class="headerlink" title="+END_SRC"></a>+END_SRC</h1><ul>
<li><p>为什么 MySQL 没有默认就采用 Streaming 方式？<br>关于 Streaming 的代价，参考：</p>
</li>
<li><p>采用 Streaming 方式在 MySQL 协议和数据报文上有没什么影响？<br>并没有，Streaming 方式有客户端模式（Client Side Cursor）和服务端模式（Server Side Cursor），上面程序例子采用的是客户端模式，MySQL 数据库的数据报文没任何差异。</p>
</li>
<li><p>Streaming 的主要问题</p>
</li>
</ul>
<ul>
<li><p>长时间占用数据库链接</p>
<ul>
<li>单个链接占用时间长</li>
<li>同个事务内链接无法复用</li>
</ul>
</li>
<li><p>数据库当前锁</p>
<ul>
<li>不同链接无法获取到事务锁</li>
</ul>
</li>
</ul>
<ul>
<li>应用场景<br><em>* Streaming 的应用场景<br>采用 Streaming 方式读取数据，看似一件很美好的事情，但是对于数据库本身却是代价非常大的。如果业务程序处理不当，会导致长时间占用数据库链接。目前只有下面一种场景建议采用 Streaming 方式读取数据： </em>需要大批量获取数据库记录用于产生其他存储的数据的业务场景* 。</li>
</ul>
<p>具体的使用例子有：</p>
<ul>
<li>用户查询大批量数据后用于导出；</li>
<li>获取整表数据用于全量更新缓存/消息中间件数据等；</li>
</ul>
<p>** 什么场景下不适合使用<br>有一些场景看似可以用流处理当不应该用的，比如：数据批处理。</p>
<p>如：查询一批数据进行业务处理，然后将数据改成下一个流转状态的。</p>
<ul>
<li>参考材料</li>
</ul>
<ul>
<li>[[<a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-implementation-notes.html#ResultSet][JDBC" target="_blank" rel="external">https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-implementation-notes.html#ResultSet][JDBC</a> API Implementation Notes]]</li>
<li>[[<a href="http://hedengcheng.com/?p=771][MySQL" target="_blank" rel="external">http://hedengcheng.com/?p=771][MySQL</a> 加锁处理分析]]</li>
<li>[[<a href="http://codepub.cn/2017/05/12/MySQL-pull-the-massive-data-out-of-memory-error/][MySQL" target="_blank" rel="external">http://codepub.cn/2017/05/12/MySQL-pull-the-massive-data-out-of-memory-error/][MySQL</a> 拉取海量数据报 OutOfMemoryError]]</li>
<li>[[<a href="https://www.wix.engineering/single-post/2017/09/18/The-Cost-of-Streaming-Data-from-MySQL][The" target="_blank" rel="external">https://www.wix.engineering/single-post/2017/09/18/The-Cost-of-Streaming-Data-from-MySQL][The</a> Cost of Streaming Data from MySQL]]</li>
<li>[[<a href="https://vladmihalcea.com/2016/11/23/how-does-mysql-result-set-streaming-perform-vs-fetching-the-whole-jdbc-resultset-at-once/][How" target="_blank" rel="external">https://vladmihalcea.com/2016/11/23/how-does-mysql-result-set-streaming-perform-vs-fetching-the-whole-jdbc-resultset-at-once/][How</a> does MySQL result set streaming perform vs fetching the whole JDBC ResultSet at once]]</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Client Side Cursor&lt;/li&gt;
&lt;li&gt;Server Side Cursor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 MySQL 中查询超大结果集时，由于 MySQL JDBC 的 ResultSet 默认是接收完全部数据后再交由应用程序进行处理的。对于
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="mysql, java" scheme="http://yoursite.com/tags/mysql-java/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 的一些使用经验</title>
    <link href="http://yoursite.com/2017/07/03/elasticsearch-best-practices/"/>
    <id>http://yoursite.com/2017/07/03/elasticsearch-best-practices/</id>
    <published>2017-07-03T13:15:00.000Z</published>
    <updated>2017-07-07T16:27:14.000Z</updated>
    
    <content type="html"><![CDATA[

<p>
Elasticsearch 上手使用比较容易，但是想真正用好，却要深入研究其相关设置。以下内容是自己整理的一些实践建议：
</p>

<a id="more"></a>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> es 配置相关</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 配置 memory<sub>lock</sub></h3>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> master 节点数</h3>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 索引相关</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 拆分索引</h3>
<div class="outline-text-3" id="text-2-1">
<p>
索引需要按不同业务维度、运维维度拆分。
</p>
<ul class="org-ul">
<li>方便业务查询使用，使每次查询能落在数据比较少的索引，避免在一个索引上查询所有内容；
</li>
<li>按时间或者业务域维度拆分索引，方便数据冷热处理；方便运维定时归档超过一定期限的索引；
</li>
</ul>
<p>
尽量避免都放在一个索引上。
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 对不需要分词检索字段设置 not<sub>analayzed</sub></h3>
<div class="outline-text-3" id="text-2-2">
<p>
对一些每次查询都是按内容全文匹配的字段，设置 type="not<sub>analayzed</sub>"，减少 es 分词，同时也是避免查询结果不准确。甚至有些字段压根就不会用来做查询用的，设置为"not<sub>indexed</sub>"。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> jvm 相关</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 最好内存能分配到 &lt; 32GB</h3>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 大规模集群的一些规划</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> 大集群下规划好 Data node、Master node、Client node</h3>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> 大规模环境下，拆分多个集群</h3>
</div>
</div>

Last Updated 2017-07-08 Sat 00:27.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.2.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
Elasticsearch 上手使用比较容易，但是想真正用好，却要深入研究其相关设置。以下内容是自己整理的一些实践建议：
&lt;/p&gt;
    
    </summary>
    
      <category term="Elastic Stack" scheme="http://yoursite.com/categories/Elastic-Stack/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 日常运维操作</title>
    <link href="http://yoursite.com/2017/07/03/maintain-elasticsearch/"/>
    <id>http://yoursite.com/2017/07/03/maintain-elasticsearch/</id>
    <published>2017-07-03T13:15:00.000Z</published>
    <updated>2017-07-07T16:04:54.000Z</updated>
    
    <content type="html"><![CDATA[


Last Updated 2017-07-08 Sat 00:04.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.2.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      


Last Updated 2017-07-08 Sat 00:04.&lt;br&gt;Render by &lt;a href=&quot;https://github.com/CodeFalling/hexo-renderer-org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
    
    </summary>
    
      <category term="Elastic Stack" scheme="http://yoursite.com/categories/Elastic-Stack/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Stack 的相关监控</title>
    <link href="http://yoursite.com/2017/07/03/monitoring-elastic-stack/"/>
    <id>http://yoursite.com/2017/07/03/monitoring-elastic-stack/</id>
    <published>2017-07-03T13:15:00.000Z</published>
    <updated>2017-07-07T16:04:51.000Z</updated>
    
    <content type="html"><![CDATA[


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 使用 X-Pack 进行监控</h2>
<div class="outline-text-2" id="text-1">
<p>
不差钱
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 插件</h2>
<div class="outline-text-2" id="text-2">
<p>
elasticsearch-head
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 监控 Elasticsearch 的状态</h2>
<div class="outline-text-2" id="text-3">
<p>
<b>Green</b>
</p>

<p>
<b>Yellow</b>
</p>

<p>
<b>Red</b>
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 基于 Monitoring API 自定义监控</h2>
</div>

Last Updated 2017-07-08 Sat 00:04.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.2.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 使用 X-Pack 进行监控&lt;/h2&gt;
&lt;div clas
    
    </summary>
    
      <category term="Elastic Stack" scheme="http://yoursite.com/categories/Elastic-Stack/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
      <category term="logstash" scheme="http://yoursite.com/tags/logstash/"/>
    
      <category term="filebeat" scheme="http://yoursite.com/tags/filebeat/"/>
    
  </entry>
  
  <entry>
    <title>通过 Zabbix 实现 Logstash 的监控</title>
    <link href="http://yoursite.com/2017/06/27/use-metrics-filter-monitoring-logstash-tps-with-zabbix/"/>
    <id>http://yoursite.com/2017/06/27/use-metrics-filter-monitoring-logstash-tps-with-zabbix/</id>
    <published>2017-06-27T02:12:00.000Z</published>
    <updated>2017-07-07T16:04:48.000Z</updated>
    
    <content type="html"><![CDATA[

<p>
参考：<a href="https://kibana.logstash.es/content/logstash/performance/monitor/heartbeat.html" target="_blank" rel="external">监控方案</a>
</p>

<p>
由于 Logstash 的 Pipeline 模式，通过 filter metrics 插件和 output zabbix 插件即可实现对 Logstash 处理 TPS 的监控。
</p>

<a id="more"></a>

<p>
<b>Logstash Pipeline</b> 模型
<img src="/2017/06/27/use-metrics-filter-monitoring-logstash-tps-with-zabbix/./logstash-pipeline.png" alt="logstash-pipeline.png">
</p>

<p>
由于 logstash-output-zabbix 插件不是 Logstash 的官方插件，因此使用前需要手动先安装该插件，安装方式非常简单[参考：<a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-zabbix.html#plugins-outputs-zabbix-zabbix_server_host" target="_blank" rel="external">zabbix|Logstash</a> ]：
</p>

<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ bin/logstash-plugin install logstash-output-zabbix</span><br></pre></td></tr></table></figure>
</div>

<p>
配置 Zabbix 的数据采集：
</p>
<ol class="org-ol">
<li>配置新的主机名为 “logstash-indexer-1”
</li>
</ol>

<div class="figure">
<p><img src="/2017/06/27/use-metrics-filter-monitoring-logstash-tps-with-zabbix/./zabbix-host.png" alt="zabbix-host.png">
</p>
</div>

<ol class="org-ol">
<li>配置采集项
</li>
</ol>

<div class="figure">
<p><img src="/2017/06/27/use-metrics-filter-monitoring-logstash-tps-with-zabbix/./zabbix-logstash-item.png" alt="zabbix-logstash-item.png">
</p>
</div>

<p>
修改 logstash 的配置文件，增加 metrics filter 和 zabbix output：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">input {</span><br><span class="line">  ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">filter {</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  metrics {</span><br><span class="line">    meter =&gt; <span class="string">"events"</span>  <span class="comment"># 统计每一个经过 filter 的事件</span></span><br><span class="line">    add_tag =&gt; <span class="string">"metric"</span></span><br><span class="line">    add_field =&gt; {<span class="string">"[@metadata][zabbix_key]"</span> =&gt; <span class="string">"logstash_events"</span>}  <span class="comment"># zabbix item 的 key，这个要和 zabbix 的配置一致</span></span><br><span class="line">    add_field =&gt; { <span class="string">"[@metadata][zabbix_host]"</span> =&gt; <span class="string">"logstash-indexer-1"</span> }  <span class="comment"># zabbix 写入的主机</span></span><br><span class="line">    flush_interval =&gt; <span class="number">10</span>  <span class="comment"># 每隔 10s 写一次</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">output {</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="string">"metric"</span> <span class="keyword">in</span> [tags] {</span><br><span class="line">    zabbix {</span><br><span class="line">      zabbix_server_host =&gt; <span class="string">"192.168.56.113"</span></span><br><span class="line">      zabbix_host =&gt; <span class="string">"[@metadata][zabbix_host]"</span></span><br><span class="line">      zabbix_key =&gt; <span class="string">"[@metadata][zabbix_key]"</span></span><br><span class="line">      zabbix_value =&gt; <span class="string">"[events][count]"</span>  <span class="comment"># [events][count] 是事件统计数据，还有其他字段内容，具体参考官网文档</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
</div>
<p>
配置好 logstash 后，reload 配置或重启服务即可。
具体配置参考官方文档说明。
</p>

<p>
至此，查看 Zabbix web 界面的 item 项即可看到监控 TPS 的图表了：
<img src="/2017/06/27/use-metrics-filter-monitoring-logstash-tps-with-zabbix/./logstash-tps-graph.png" alt="logstash-tps-graph.png">
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 参考内容</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-metrics.html" target="_blank" rel="external">metrics</a>
</li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-zabbix.html#plugins-outputs-zabbix-zabbix_server_host" target="_blank" rel="external">zabbix</a>
</li>
</ul>
</div>
</div>

Last Updated 2017-07-08 Sat 00:04.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.2.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
参考：&lt;a href=&quot;https://kibana.logstash.es/content/logstash/performance/monitor/heartbeat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;监控方案&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
由于 Logstash 的 Pipeline 模式，通过 filter metrics 插件和 output zabbix 插件即可实现对 Logstash 处理 TPS 的监控。
&lt;/p&gt;
    
    </summary>
    
      <category term="Elastic Stack" scheme="http://yoursite.com/categories/Elastic-Stack/"/>
    
    
      <category term="logstash" scheme="http://yoursite.com/tags/logstash/"/>
    
      <category term="zabbix" scheme="http://yoursite.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务知识整理</title>
    <link href="http://yoursite.com/2017/06/22/distributed-transactions-introduce/"/>
    <id>http://yoursite.com/2017/06/22/distributed-transactions-introduce/</id>
    <published>2017-06-22T14:21:00.000Z</published>
    <updated>2017-07-07T16:05:04.000Z</updated>
    
    <content type="html"><![CDATA[


Last Updated 2017-07-08 Sat 00:05.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.2.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      


Last Updated 2017-07-08 Sat 00:05.&lt;br&gt;Render by &lt;a href=&quot;https://github.com/CodeFalling/hexo-renderer-org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在 Emacs 中使用 PlantUML</title>
    <link href="http://yoursite.com/2017/06/05/using-plantuml-in-emacs/"/>
    <id>http://yoursite.com/2017/06/05/using-plantuml-in-emacs/</id>
    <published>2017-06-05T02:12:00.000Z</published>
    <updated>2017-07-07T16:04:43.000Z</updated>
    
    <content type="html"><![CDATA[

<p>
PlantUML 的使用依赖与 Java 环境，因此需要在系统上先安装好 Java 环境。
</p>
<ul class="org-ul">
<li>下载 PlantUML jar：<a href="http://plantuml.com/download" target="_blank" rel="external">PlantUML compiled Jar</a>。
</li>
<li>plantuml-mode：<a href="https://github.com/skuro/plantuml-mode" target="_blank" rel="external">skuro/plantuml-mode - GitHub</a>
</li>
</ul>

<a id="more"></a>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Emacs 配置</h2>
<div class="outline-text-2" id="text-1">
<p>
需要依赖 Java 环境及 plantuml.jar（<a href="http://plantuml.com/download" target="_blank" rel="external">下载</a>）。
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">setq</span> plantuml-java-args <span class="list">(<span class="keyword">expand-file-name</span> <span class="string">"~/.emacs.d/bin/plantuml.jar"</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">use-package</span> plantuml-mode</span><br><span class="line">  <span class="keyword">:ensure</span> <span class="literal">t</span></span><br><span class="line">  <span class="keyword">:config</span></span><br><span class="line">  <span class="comment">;; Enable plantuml-mode for PlantUML files</span></span><br><span class="line">  <span class="list">(<span class="keyword">add-to-list</span> <span class="quoted">'auto-mode-alist</span> <span class="quoted">'(<span class="string">"\\.plantuml\\'"</span> . plantuml-mode)</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">;; Enable plantuml-mode within an org-mode document</span></span><br><span class="line">  <span class="list">(<span class="keyword">add-to-list</span> <span class="quoted">'org-src-lang-modes</span> <span class="quoted">'(<span class="string">"plantuml"</span> . plantuml)</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">;; Use fundamental mode when editing plantuml blocks with C-c '</span></span><br><span class="line">  <span class="list">(<span class="keyword">add-to-list</span> <span class="quoted">'org-src-lang-modes</span> <span class="quoted">(<span class="keyword">quote</span> (<span class="string">"plantuml"</span> . fundamental))</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">;; active Org-babel languages</span></span><br><span class="line">  <span class="list">(<span class="keyword">org-babel-do-load-languages</span></span><br><span class="line">   <span class="quoted">'org-babel-load-languages</span></span><br><span class="line">   <span class="quoted">'(;; other Babel languages</span><br><span class="line">     (plantuml . <span class="literal">t</span>))</span>)</span></span><br><span class="line">  )</span></span><br></pre></td></tr></table></figure>
</div>

<p>
当执行 org code block 后，显示图片
</p>
<div class="org-src-container">

<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">add-hook</span> <span class="quoted">'org-babel-after-execute-hook</span> <span class="quoted">'itsyc/display-inline-images</span> <span class="quoted">'append</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="list">(<span class="keyword">defun</span> itsyc/display-inline-images <span class="list">()</span></span><br><span class="line">  <span class="list">(<span class="keyword">condition-case</span> <span class="literal">nil</span></span><br><span class="line">      <span class="list">(<span class="keyword">org-display-inline-images</span>)</span></span><br><span class="line">    <span class="list">(<span class="keyword">error</span> <span class="literal">nil</span>)</span>)</span>)</span></span><br></pre></td></tr></table></figure>
</div>

<p>
PlantUML 语法参考：<a href="http://emacsist.com/10250" target="_blank" rel="external">使用 Emacs 敲出 UML，PlantUML 快速指南</a>（官方：<a href="http://plantuml.com/sequence-diagram" target="_blank" rel="external">时序图（Sequence Diagram）</a>）。
</p>

<p>
使用 PlantUML 的主要问题：缺乏可视化，不直观，但编辑相对简单。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 中文乱码问题</h2>
<div class="outline-text-2" id="text-2">
<p>
<b>解决：</b> 在 code block 的 option 中添加 <code>:cmdline -charset utf-8</code> （参见：<a href="https://www.cnblogs.com/yangwen0228/p/6825554.html" target="_blank" rel="external">Windows 平台下在 Emacs 中使用 plantuml 中文乱码问题（已解决）</a>）
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 参考阅读</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li><a href="http://wiki.manan.org/tools/org_mode_drawing.html" target="_blank" rel="external">使用 Org mode 画图</a>
</li>
</ul>
</div>
</div>

Last Updated 2017-07-08 Sat 00:04.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.2.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
PlantUML 的使用依赖与 Java 环境，因此需要在系统上先安装好 Java 环境。
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;下载 PlantUML jar：&lt;a href=&quot;http://plantuml.com/download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PlantUML compiled Jar&lt;/a&gt;。
&lt;/li&gt;
&lt;li&gt;plantuml-mode：&lt;a href=&quot;https://github.com/skuro/plantuml-mode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;skuro/plantuml-mode - GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Emacs" scheme="http://yoursite.com/categories/Emacs/"/>
    
    
      <category term="orgmode" scheme="http://yoursite.com/tags/orgmode/"/>
    
      <category term="plantuml" scheme="http://yoursite.com/tags/plantuml/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo + Orgmode 构建博客</title>
    <link href="http://yoursite.com/2017/06/04/blogging-with-hexo-orgmode/"/>
    <id>http://yoursite.com/2017/06/04/blogging-with-hexo-orgmode/</id>
    <published>2017-06-04T00:36:00.000Z</published>
    <updated>2017-11-15T08:03:04.908Z</updated>
    
    <content type="html"><![CDATA[

<p>
使用 Hexo 搭建一个个人博客的过程非常简单，参考官方文档即可 [<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">GitHub</a>]。
</p>

<a id="more"></a>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 基本设置</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 使用 orgmode 来编辑文档</h3>
<div class="outline-text-3" id="text-1-1">
<p>
感谢 CodeFalling 插件：<a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">CodeFalling/hexo-renderer-org - GitHub</a>
</p>
</div>

<div id="outline-container-sec-1-1-1" class="outline-4">
<h4 id="sec-1-1-1"><span class="section-number-4">1.1.1</span> 禁止 hexo-renderer-org 生成 toc</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
<b>方法一：</b>
在每篇文章前面加上 <code>#+OPTIONS: toc:nil</code> 。
</p>

<p>
<b>方法二：</b>
统一设置。
</p>

<p>
参考：<a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">CodeFalling/hexo-renderer-org - GitHub</a>。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> hexo-asset-image</h3>
<div class="outline-text-3" id="text-1-2">
<p>
配合这个插件使用：
<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">https://github.com/CodeFalling/hexo-asset-image</a>  这个插件值得使用
</p>

<ul class="org-ul">
<li><a href="http://www.tuicool.com/articles/umEBVfI" target="_blank" rel="external">在 hexo 中无痛使用本地图片</a>
</li>
<li><a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/" target="_blank" rel="external">hexo 中完美插入本地图片</a>
</li>
</ul>
</div>

<div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="section-number-4">1.2.1</span> 其他解决方案</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
图床
</p>
</div>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 使用 Emacs 来生成博客静态页面及启停 Hexo</h3>
<div class="outline-text-3" id="text-1-3">
<p>
参考：<a href="http://summerisgreen.com/blog/2016-09-30-2016-09-30-%E4%BD%BF%E7%94%A8hexo%E5%92%8Cemacs-org%E6%9D%A5%E5%86%99%E5%8D%9A%E5%AE%A2.html" target="_blank" rel="external">使用 Hexo 和 emacs-Org 来写博客</a>
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> RSS 插件</h3>
<div class="outline-text-3" id="text-1-4">
<p>
支持 RSS：
</p>
<div class="org-src-container">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
</div>
<p>
启动服务器，用浏览器打开 <a href="http://localhost:4000/atom.xml%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0" target="_blank" rel="external">http://localhost:4000/atom.xml%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0</a> RSS 已经生效了。
</p>

<p>
关于 RSS 的设置。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 主题</h2>
<div class="outline-text-2" id="text-2">
<p>
Hexo 有丰富的主题资源可以使用，其中比较知名的的是 NexT 主题。
</p>

<p>
不同的主题配置会很不一样。
</p>

<p>
<b>其他一些好看的主题：</b>
</p>
<ul class="org-ul">
<li><a href="https://github.com/7ye/maupassant-hexo" target="_blank" rel="external">7ye/maupassant-hexo - GitHub</a>
</li>
</ul>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Wiki Theme For Hexo</h3>
<div class="outline-text-3" id="text-2-1">
<p>
同样也有用于构建 Wiki 的主题，参考：<a href="http://www.jianshu.com/p/e7413116e9d4" target="_blank" rel="external">Hexo 搭建 WiKi</a>(<a href="https://github.com/wzpan/hexo-theme-wixo" target="_blank" rel="external">wzpan/hexo-theme-wixo - GitHub</a>)
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> disqus 评论</h2>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 常用命令</h2>
<div class="outline-text-2" id="text-4">
<p>
## Quick Start
</p>

<p>
### Create a new post
</p>

<p>
``` bash
$ hexo new "My New Post"
```
</p>

<p>
More info: [Writing](<a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">https://hexo.io/docs/writing.html</a>)
</p>

<p>
### Run server
</p>

<p>
``` bash
$ hexo server
```
</p>

<p>
More info: [Server](<a href="https://hexo.io/docs/server.html" target="_blank" rel="external">https://hexo.io/docs/server.html</a>)
</p>

<p>
### Generate static files
</p>

<p>
``` bash
$ hexo generate
```
</p>

<p>
More info: [Generating](<a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">https://hexo.io/docs/generating.html</a>)
</p>

<p>
### Deploy to remote sites
</p>

<p>
``` bash
$ hexo deploy
```
</p>

<p>
More info: [Deployment](<a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a>)
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 参考材料</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li><a href="https://github.com/lengyueyang/lengyueyang.github.io" target="_blank" rel="external"><a href="https://lengyueyang.github.io/" target="_blank" rel="external">https://lengyueyang.github.io/</a></a>
</li>
<li><a href="http://summerisgreen.com/blog/2016-09-30-2016-09-30-%E4%BD%BF%E7%94%A8hexo%E5%92%8Cemacs-org%E6%9D%A5%E5%86%99%E5%8D%9A%E5%AE%A2.html" target="_blank" rel="external">使用 Hexo 和 emacs-Org 来写博客</a>
</li>
<li><a href="https://weychen.github.io/2016/09/28/set-up-blog-with-hexo-org-mode/" target="_blank" rel="external">set-up-blog-with-hexo+org-mode</a>
</li>
<li><a href="https://lovenight.github.io/2015/11/10/Hexo-3-1-1-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/" target="_blank" rel="external">Hexo 3.1.1 静态博客搭建指南</a>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 解决 NexT 主题 Tags/Categories "Cannot GET <i>tags</i>" 错误</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="https://beeant0512.github.io/2016/03/20/2016-03-20-21-50-10/" target="_blank" rel="external">Next 主题 Tags/Categories Cannot GET <i>tags</i></a>
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 一些比较不错的 Hexo 博客</h2>
<div class="outline-text-2" id="text-7">
<ul class="org-ul">
<li><a href="http://lowrank.science/" target="_blank" rel="external">Grok</a>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> 目前问题</h2>
<div class="outline-text-2" id="text-8">
</div><div id="outline-container-sec-8-1" class="outline-3">
<h3 id="sec-8-1"><span class="section-number-3">8.1</span> 1. 使用 hexo-renderer-org，如果内容有 _ 的内容，下划线后面的文字都会转换成下标，目前还不知道如何处理。</h3>
</div>
</div>

Last Updated 2017-07-08 Sat 00:26.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.2.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
使用 Hexo 搭建一个个人博客的过程非常简单，参考官方文档即可 [&lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;]。
&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="emacs" scheme="http://yoursite.com/tags/emacs/"/>
    
      <category term="orgmode" scheme="http://yoursite.com/tags/orgmode/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 核心概念</title>
    <link href="http://yoursite.com/2017/06/04/elasticsearch-introduction/"/>
    <id>http://yoursite.com/2017/06/04/elasticsearch-introduction/</id>
    <published>2017-06-04T00:36:00.000Z</published>
    <updated>2017-07-07T16:01:11.000Z</updated>
    
    <content type="html"><![CDATA[

<p>
在深入学习使用 Elasticsearch（以下简称：`es`）之前，有必要对其相关的概念进行了解。核心概念如下：
</p>

<a id="more"></a>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 集群(Cluster)</h2>
<div class="outline-text-2" id="text-1">
<p>
集群是 es 的一个分布式运作环境，有一个统一的集群名字（`cluster.name`）。由多个节点构成，其中有且只有一个为主节点，这个主节点是可以通过选举产生的，主从节点是对于集群内部来说的。es 的一个概念就是去中心化，字面上理解就是无中心节点，这是对于集群外部来说的，因为从外部来看 es 集群，在逻辑上是个整体，你与任何一个节点的通信和与整个 es 集群通信是等价的。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 节点(Node)</h2>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 索引(index)</h2>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 类型(Type)</h2>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 文档(Document)</h2>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 分片(Shard)</h2>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 副本(Replica)</h2>
</div>

Last Updated 2017-07-08 Sat 00:01.<br>Render by <a href="https://github.com/CodeFalling/hexo-renderer-org" target="_blank" rel="external">hexo-renderer-org</a> with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 25.2.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
在深入学习使用 Elasticsearch（以下简称：`es`）之前，有必要对其相关的概念进行了解。核心概念如下：
&lt;/p&gt;
    
    </summary>
    
      <category term="Elastic Stack" scheme="http://yoursite.com/categories/Elastic-Stack/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
  </entry>
  
</feed>
